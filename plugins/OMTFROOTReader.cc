#include "UserCode/OMTFSimulation/plugins/OMTFROOTReader.h"

#include "UserCode/OMTFSimulation/interface/OMTFProcessor.h"
#include "UserCode/OMTFSimulation/interface/OMTFConfiguration.h"

#include "UserCode/L1RpcTriggerAnalysis/interface/AnaEff.h"

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
OMTFROOTReader::OMTFROOTReader(const edm::ParameterSet & cfg){

  if (theConfig.exists("anaEff")) myAnaEff = new   AnaEff(cfg.getParameter<edm::ParameterSet>("anaEff") );
  
  if (theConfig.exists("OMTF")){
    myOMTFConfig = new OMTFConfiguration(cfg.getParameter<edm::ParameterSet>("OMTF"));
    myOMTF = new OMTFProcessor(cfg.getParameter<edm::ParameterSet>("OMTF"));
  }
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
OMTFROOTReader::~OMTFROOTReader(){

  delete myOMTF;
  delete myOMTFConfig;

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
void OMTFROOTReader::beginJob(){

  myHistos.SetOwner();
  myAnaEff->init(myHistos);

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
void OMTFROOTReader::analyze(const edm::Event&, const edm::EventSetup& es){

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
void OMTFROOTReader::endJob(){

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
